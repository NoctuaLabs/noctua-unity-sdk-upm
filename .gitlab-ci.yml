stages:
  - trigger
  - bump-version
  - release
  - publish

trigger_job:
  stage: trigger
  trigger:
    project: $BUILDER_PROJECT
  rules:
    - when: never

.bump-version:
  image :
    name: alpine/git
    entrypoint: [""]
  before_script:
    - apk add git-cliff
    - apk add jq
    - apk add curl
    - git config --global user.email "gitlab-ci@noctua.gg"
    - git config --global user.name "Noctua Gitlab CI"

bump-version:
  extends: .bump-version
  stage: bump-version
  tags:
    - local2
  rules:
    - if: $CI_COMMIT_BRANCH == "main-icm"
      when: always
  variables:
    GIT_STRATEGY: fetch # reuse workspace
    GIT_DEPTH: 0 # avoid shallow clone to give cliff all the info it needs
  script:
    - NEW_VERSION_TAG="$(git-cliff --bumped-version)"
    - jq --arg version "$NEW_VERSION_TAG" '.version = $version' package.json > temp.json && mv temp.json package.json
    - |
      cat <<EOF > Runtime/AssemblyInfo.cs
      using System.Reflection;

      [assembly: AssemblyVersion("$NEW_VERSION_TAG")]
      EOF
    - if [ -n "$(git diff --name-only HEAD -- ./package.json)" ]; then
        echo "Bumping version for next release";
        git add package.json;
        git add Runtime/AssemblyInfo.cs;
        git commit -m "bump version to $NEW_VERSION_TAG [skip ci]";
        git push "https://$GITLAB_BUILDER_USER:$GITLAB_BUILDER_ACCESS_TOKEN@gitlab.com/evosverse/noctua/noctua-sdk-unity-upm.git" HEAD:$CI_COMMIT_BRANCH --follow-tags -o ci.skip;
      else
        echo "No version bump required";
      fi

release:
  extends: .bump-version
  stage: release
  tags:
    - local2
  rules:
    - if: $CI_COMMIT_BRANCH == "main-icm"
      when: manual
  variables:
    GIT_STRATEGY: fetch # reuse workspace
    GIT_DEPTH: 0 # avoid shallow clone to give cliff all the info it needs
  script:
    - git fetch --tags
    - git checkout $CI_COMMIT_BRANCH
    - git pull --rebase origin $CI_COMMIT_BRANCH # testing using flag rebase
    - NEW_VERSION_TAG="$(git-cliff --bumped-version)"
    - jq --arg version "$NEW_VERSION_TAG" '.version = $version' package.json > temp.json && mv temp.json package.json
    - git add package.json
    - |
      cat <<EOF > Runtime/AssemblyInfo.cs
      using System.Reflection;

      [assembly: AssemblyVersion("$NEW_VERSION_TAG")]
      EOF
    - git add Runtime/AssemblyInfo.cs
    - git-cliff --bump > CHANGELOG.md
    - git add CHANGELOG.md
    - git commit -m "Release $NEW_VERSION_TAG"
    - git tag -a $NEW_VERSION_TAG -m "Release $NEW_VERSION_TAG"
    - git push "https://$GITLAB_BUILDER_USER:$GITLAB_BUILDER_ACCESS_TOKEN@gitlab.com/evosverse/noctua/noctua-sdk-unity-upm.git" HEAD:$CI_COMMIT_BRANCH --follow-tags -o ci.skip

publish:
  extends: .bump-version
  stage: publish
  tags:
    - local2
  rules:
    - if: $CI_COMMIT_BRANCH == "main-icm"
  variables:
    GIT_STRATEGY: fetch # reuse workspace
    GIT_DEPTH: 0 # avoid shallow clone to give cliff all the info it needs
  script:
    - git fetch --tags
    - git checkout $CI_COMMIT_BRANCH
    - git pull origin $CI_COMMIT_BRANCH
    - curl -sS https://webi.sh/gh | sh
    - source ~/.config/envman/PATH.env
    - NEW_VERSION_TAG="$(jq -r '.version' package.json)"
    - git-cliff --latest > GithubRelease.md
    - echo $GITHUB_ACCESS_TOKEN | gh auth login --with-token
    - git remote add github https://github.com/NoctuaLabs/noctua-unity-sdk-upm.git
    - gh release create $NEW_VERSION_TAG --title $NEW_VERSION_TAG --notes-file GithubRelease.md
    - git remote remove github